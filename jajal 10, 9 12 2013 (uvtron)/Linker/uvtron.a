;/**
;@auth:grafika j
;@lastUpdate: 22 mar
;@desc:
;*/
;#include "uvtron.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;//#include "tpa81.h"
;//#include "main_master.h"
;
;#include <lcd.h>
;#include <delay.h>
;#include <stdlib.h>
;
;unsigned char lcd[15];
;int photon;
;
;void uvtronInit()
; 0001 0012 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0013    DDRD.7 = 0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0001 0014    PORTD.7 = 1;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 0015 }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;void uvtronOn()
; 0001 0018 {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 0019 // External Interrupt(s) initialization
; 0001 001A // INT0: Off
; 0001 001B // INT1: Off
; 0001 001C // INT2: Off
; 0001 001D // INT3: Off
; 0001 001E // INT4: On
; 0001 001F // INT4 Mode: Falling Edge
; 0001 0020 // INT5: Off
; 0001 0021 // INT6: Off
; 0001 0022 // INT7: Off
; 0001 0023 EICRA=0x00;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 0024 EICRB=0x02;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 0025 EIMSK=0x10;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 0026 EIFR=0x10;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 0027 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;void uvtronOff()
; 0001 002A {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 002B  // External Interrupt(s) initialization
; 0001 002C // INT0: Off
; 0001 002D // INT1: Off
; 0001 002E // INT2: Off
; 0001 002F // INT3: Off
; 0001 0030 // INT4: Off
; 0001 0031 // INT5: Off
; 0001 0032 // INT6: Off
; 0001 0033 // INT7: Off
; 0001 0034 EICRA=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 0035 EICRB=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 0036 EIMSK=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0037 
; 0001 0038 }
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;// this function use for waiting the pulse from UVTRON
;bool uvtronScan(unsigned int time)
; 0001 003B {
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 003C     char lcd[15];
; 0001 003D 
; 0001 003E 
; 0001 003F    photon=0;
;PCODE: $0000002D VOL: 0
;	time -> Y+15
;	lcd -> Y+0
;PCODE: $0000002E VOL: 0
; 0001 0040    uvtronOn();
;PCODE: $0000002F VOL: 0
; 0001 0041    delay_ms(time);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0001 0042    uvtronOff();
;PCODE: $00000033 VOL: 0
; 0001 0043    lcd_clear();
;PCODE: $00000034 VOL: 0
; 0001 0044 
; 0001 0045    if(photon>3){
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 0046 
; 0001 0047         lcd_putsf("  ADA API");
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0001 0048         delay_ms(500);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 0049         //photon=0;
; 0001 004A         uvtronOff();
;PCODE: $0000003F VOL: 0
; 0001 004B        itoa(photon,lcd);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 004C        lcd_gotoxy(0,0);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0001 004D        lcd_puts(lcd);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 004E        //photon=0;
; 0001 004F 
; 0001 0050        return 1;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0001 0051    }
; 0001 0052    else {
;PCODE: $0000004F VOL: 0
; 0001 0053 
; 0001 0054        lcd_putsf("  TIDAK ADA API");
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 0055        delay_ms(500);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0001 0056        //photon=0;
; 0001 0057         itoa(photon,lcd);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0001 0058        lcd_gotoxy(0,0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0001 0059        lcd_puts(lcd);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 005A        //photon=0;
; 0001 005B 
; 0001 005C         return 0;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 005D   }
;PCODE: $00000066 VOL: 0
; 0001 005E 
; 0001 005F }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;
;// External Interrupt 4 service routine
;interrupt [EXT_INT4] void ext_int4_isr(void)
; 0001 0063 {
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0001 0064 // Place your code here
; 0001 0065 
; 0001 0066 
; 0001 0067         photon++;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0001 0068         uvtronOn();
;PCODE: $0000006F VOL: 0
; 0001 0069 
; 0001 006A }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;
;
;
