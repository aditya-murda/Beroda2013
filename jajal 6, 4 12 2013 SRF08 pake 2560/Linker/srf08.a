;/**
;@author: vektor dewanto
;@ver: 12 Jan 10
;@desc:
;    srf08 setting
;        set max range:150
;        analog gain:5
;        srf08 read till distance 129 cm for echo 1
;*/
;#include "srf08.h"
;
;bool sonarRange(uint8_t address){
; 0001 000C _Bool sonarRange(uint8_t address){

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 0001 000D    i2c_start();         // send start sequence
;	address -> Y+0
;PCODE: $00000002 VOL: 0
; 0001 000E    i2c_write(address);  // SRF08 I2C address with R/W bit: clear = W
;PCODE: $00000003 VOL: 0
;PCODE: $00000004 VOL: 0
;PCODE: $00000005 VOL: 0
; 0001 000F    i2c_write(0);        // SRF08 command register address
;PCODE: $00000006 VOL: 0
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
; 0001 0010    i2c_write(0x51);     // command to start ranging in cm
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0001 0011    i2c_stop();          // send stop sequence
;PCODE: $0000000C VOL: 0
; 0001 0012 
; 0001 0013    return true;
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0001 0014 }//end range_order
;PCODE: $00000010 VOL: 0
;
;uint16_t sonarGetRange(uint8_t addr,uint8_t reg){
; 0001 0016 uint16_t sonarGetRange(uint8_t addr,uint8_t reg){
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 0017    uint8_t hi=0,lo=0,temp=0;
; 0001 0018    uint16_t range=0;
; 0001 0019 
; 0001 001A    //(1) wait till data is available,
; 0001 001B    do{
;PCODE: $00000013 VOL: 0
;	addr -> Y+7
;	reg -> Y+6
;	hi -> R17
;	lo -> R16
;	temp -> R19
;	range -> R20,R21
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 001C       i2c_start();              // send start sequence
;PCODE: $0000001D VOL: 0
; 0001 001D       i2c_write(addr);          // SRF08 I2C address with R/W bit:clear = W
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 001E       i2c_write(1);             //write register number:1
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0001 001F 
; 0001 0020       i2c_start();              // send a restart sequence
;PCODE: $00000024 VOL: 0
; 0001 0021       i2c_write(addr|1);       // SRF08 I2C address with R/W bit: set = R
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0022       temp=i2c_read(0);         // get the 1st reg nums and send NO acknowledge
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 0023       i2c_stop();
;PCODE: $0000002D VOL: 0
; 0001 0024    }while(temp == 0xFF);        //the I2C data line (SDA) is pulled high if nothing is driving it
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 0025 
; 0001 0026    //(2) get data available
; 0001 0027    i2c_start();                 // send start sequence
;PCODE: $00000034 VOL: 0
; 0001 0028    i2c_write(addr);             // SRF08 I2C address with R/W bit:clear = W
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 0029    i2c_write(reg);              //write register number
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 002A    i2c_start();                 // send a restart sequence
;PCODE: $0000003B VOL: 0
; 0001 002B    i2c_write(addr|1);           // SRF08 I2C address with R/W bit: set = R
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 002C    hi = i2c_read(1);            // get the high byte of the range and send acknowledge; regNumber = reg
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 002D    lo = i2c_read(0);            // get low byte of the range;regNumber = reg+1;Note: NO acknowledgement is sent
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 002E    i2c_stop();                  // send stop sequence
;PCODE: $00000048 VOL: 0
; 0001 002F 
; 0001 0030    range=hi;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 0031    range<<=8;
;PCODE: $0000004C VOL: 0
; 0001 0032    range|=lo;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 0033 
; 0001 0034    return range;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0001 0035 }
;PCODE: $00000055 VOL: 0
;
;uint16_t sonarGetRangeEcho(uint8_t echoNum, uint8_t addr){
; 0001 0037 uint16_t sonarGetRangeEcho(uint8_t echoNum, uint8_t addr){
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 0038     return sonarGetRange(addr,(echoNum*2));
;	echoNum -> Y+1
;	addr -> Y+0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0001 0039 }
;PCODE: $00000060 VOL: 0
;
;uint16_t sonarGet(uint8_t addr){
; 0001 003B uint16_t sonarGet(uint8_t addr){
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 003C     uint16_t range;
; 0001 003D     range = sonarGetRange(addr,2);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;	addr -> Y+2
;	range -> R16,R17
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0001 003E     if(range==0)
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 003F       range=50;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0001 0040     return range;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 0041 }
;PCODE: $00000077 VOL: 0
;
;bool sonarSetRange(uint8_t addr,uint16_t rangeMili){
; 0001 0043 _Bool sonarSetRange(uint8_t addr,uint16_t rangeMili){
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0001 0044 
; 0001 0045    //NOTE: *)The range is ((Range Register x 43mm) + 43mm)
; 0001 0046    //      *)The range is set to maximum every time the SRF08 is powered-up.
; 0001 0047    i2c_start();
;	addr -> Y+2
;	rangeMili -> Y+0
;PCODE: $0000007A VOL: 0
; 0001 0048    i2c_write(addr);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0001 0049    i2c_write(2);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 004A    i2c_write(
; 0001 004B                ceil(
; 0001 004C                      (float)(rangeMili-43)/43
; 0001 004D                     )
; 0001 004E             );
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0001 004F    i2c_stop();
;PCODE: $0000008C VOL: 0
; 0001 0050 
; 0001 0051    return true;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0001 0052 }
;PCODE: $00000090 VOL: 0
;
;
;bool sonarSetGain(uint8_t addr,uint8_t gain){
; 0001 0055 _Bool sonarSetGain(uint8_t addr,uint8_t gain){
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0001 0056 
; 0001 0057    i2c_start();
;	addr -> Y+1
;	gain -> Y+0
;PCODE: $00000093 VOL: 0
; 0001 0058    i2c_write(addr);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 0059    i2c_write(1);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 005A    i2c_write(gain);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0001 005B    i2c_stop();
;PCODE: $0000009D VOL: 0
; 0001 005C 
; 0001 005D    return true;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0001 005E }
;PCODE: $000000A1 VOL: 0
;
;
;uint8_t sonarGetLight(uint8_t addr){
; 0001 0061 uint8_t sonarGetLight(uint8_t addr){
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0001 0062    uint8_t light=0,temp=0;
; 0001 0063 
; 0001 0064    //(1) wait till data is available,
; 0001 0065    do
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;	addr -> Y+2
;	light -> R17
;	temp -> R16
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0001 0066    {
; 0001 0067       i2c_start();// send start sequence
;PCODE: $000000AB VOL: 0
; 0001 0068       i2c_write(addr);// SRF08 I2C address with R/W bit:clear = W
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0001 0069       i2c_write(1);//write register number:1
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0001 006A 
; 0001 006B       i2c_start();// send a restart sequence
;PCODE: $000000B2 VOL: 0
; 0001 006C       i2c_write(addr|1);   // SRF08 I2C address with R/W bit: set = R
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0001 006D       temp=i2c_read(0);       // get the soft rev nums and send NO acknowledge
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0001 006E       i2c_stop();
;PCODE: $000000BB VOL: 0
; 0001 006F    }while(temp == 0xFF);//the I2C data line (SDA) is pulled high if nothing is driving it
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0001 0070 
; 0001 0071    //(2) get Data
; 0001 0072    i2c_start();            // send start sequence
;PCODE: $000000C2 VOL: 0
; 0001 0073    i2c_write(addr);     // SRF08 I2C address with R/W bit:clear = W
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0001 0074    i2c_write(1);         //write register number
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0001 0075    i2c_start();            // send a restart sequence
;PCODE: $000000C9 VOL: 0
; 0001 0076    i2c_write(addr|1);   // SRF08 I2C address with R/W bit: set = R
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0001 0077    light = i2c_read(0);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0001 0078    i2c_stop();
;PCODE: $000000D2 VOL: 0
; 0001 0079 
; 0001 007A    return light;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0001 007B }
;PCODE: $000000DA VOL: 0
;
;//addr for the old address, target for new address
;bool srf08Addressing(unsigned char addr, unsigned char target){
; 0001 007E _Bool srf08Addressing(unsigned char addr, unsigned char target){
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0001 007F    i2c_start();		// send start sequence
;	addr -> Y+1
;	target -> Y+0
;PCODE: $000000DD VOL: 0
; 0001 0080    i2c_write(addr);	// accsess SRF08 in address 0xE0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0001 0081    i2c_write(0); 	// SRF08 command register address
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0001 0082    i2c_write(0xA0);	// 1st in sequence to change I2C address
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0001 0083 
; 0001 0084    i2c_start();		// send start sequence
;PCODE: $000000E7 VOL: 0
; 0001 0085    i2c_write(addr);	// accsess SRF08 in address 0xE0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0001 0086    i2c_write(0);	// SRF08 command register address
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0001 0087    i2c_write(0xAA);	// 2nd in sequence to change I2C address
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0001 0088 
; 0001 0089    i2c_start();		// send start sequence
;PCODE: $000000F1 VOL: 0
; 0001 008A    i2c_write(addr);	// accsess SRF08 in address 0xE0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0001 008B    i2c_write(0);	// SRF08 command register address
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0001 008C    i2c_write(0xA5);	// 3rd in sequence to change I2C address
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0001 008D 
; 0001 008E    i2c_start();//send start sequence
;PCODE: $000000FB VOL: 0
; 0001 008F    i2c_write(addr);	// accsess SRF08 in address 0xE0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0001 0090    i2c_write(0);	// SRF08 command register address
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0001 0091    i2c_write(target);	// change I2C address, choose the target address
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0001 0092 
; 0001 0093    i2c_stop();		// send stop sequence
;PCODE: $00000105 VOL: 0
; 0001 0094 
; 0001 0095    return true;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0001 0096 }//end srf08Addressing
;PCODE: $00000109 VOL: 0
;
;bool sonarTest(uint8_t addr){
; 0001 0098 _Bool sonarTest(uint8_t addr){
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0001 0099    char lcd[15];
; 0001 009A    //lcd_clear();
; 0001 009B    //lcd_gotoxy(0,0);
; 0001 009C    sonarRange(addr);
;PCODE: $0000010C VOL: 0
;	addr -> Y+15
;	lcd -> Y+0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0001 009D    sonarSetRange(addr,3000);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0001 009E    //mengganti echo menjadi dua namppil awal langsung 50, tampaknya ditambah gitu
; 0001 009F    ltoa(sonarGetRangeEcho(2,addr),lcd);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0001 00A0    lcd_puts(lcd);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0001 00A1    delay_ms(300);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0001 00A2    lcd_clear();
;PCODE: $00000125 VOL: 0
; 0001 00A3 
; 0001 00A4    //itoa(sonarGetLight(addr),lcd);
; 0001 00A5    //lcd_gotoxy(11,1);lcd_puts(lcd);
; 0001 00A6 
; 0001 00A7    //printf("%d ", sonarGetRangeEcho(1,addr));
; 0001 00A8 
; 0001 00A9    //printf("light: %d\n", sonarGetLight(addr));
; 0001 00AA    return true;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0001 00AB }
;PCODE: $00000129 VOL: 0
;
;uint8_t range(uint8_t addr)
; 0001 00AE {
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0001 00AF    sonarRange(addr);
;	addr -> Y+0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0001 00B0    return sonarGet(addr);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0001 00B1 }
;PCODE: $00000134 VOL: 0
;
;
;void displayAllSonar()
; 0001 00B5 {
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0001 00B6 
; 0001 00B7         /*
; 0001 00B8         WindWire's Sonar Location
; 0001 00B9                      __
; 0001 00BA                    _|__|_____
; 0001 00BB                  //          \\SONAR RIGHTDIAG
; 0001 00BC                  /            \
; 0001 00BD                 |              |
; 0001 00BE                ||              ||
; 0001 00BF                 |              |
; 0001 00C0                 |              |
; 0001 00C1                ||______________||
; 0001 00C2                       |__|
; 0001 00C3 
; 0001 00C4 
; 0001 00C5         */
; 0001 00C6 char lcd[16];
; 0001 00C7 
; 0001 00C8 sonarRange(SONAR_FRONT);
;PCODE: $00000137 VOL: 0
;	lcd -> Y+0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0001 00C9 itoa(sonarGet(SONAR_FRONT),lcd);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0001 00CA lcd_gotoxy(0,0);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0001 00CB lcd_puts(lcd);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0001 00CC 
; 0001 00CD sonarRange(SONAR_RIGHTDIAG);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0001 00CE itoa(sonarGet(SONAR_RIGHTDIAG),lcd);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0001 00CF lcd_gotoxy(3,0);
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0001 00D0 lcd_puts(lcd);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0001 00D1 
; 0001 00D2 
; 0001 00D3 sonarRange(SONAR_RIGHTFRONT);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0001 00D4 itoa(sonarGet(SONAR_RIGHTFRONT),lcd);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0001 00D5 lcd_gotoxy(6,0);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0001 00D6 lcd_puts(lcd);
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0001 00D7 
; 0001 00D8 
; 0001 00D9 sonarRange(SONAR_RIGHTBACK);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0001 00DA itoa(sonarGet(SONAR_RIGHTBACK),lcd);
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0001 00DB lcd_gotoxy(9,0);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0001 00DC lcd_puts(lcd);
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0001 00DD 
; 0001 00DE sonarRange(SONAR_BACK);
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0001 00DF itoa(sonarGet(SONAR_BACK),lcd);
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0001 00E0 lcd_gotoxy(12,0);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0001 00E1 lcd_puts(lcd);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0001 00E2 
; 0001 00E3 sonarRange(SONAR_LEFTBACK);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0001 00E4 itoa(sonarGet(SONAR_LEFTBACK),lcd);
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0001 00E5 lcd_gotoxy(0,1);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0001 00E6 lcd_puts(lcd);
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0001 00E7 
; 0001 00E8 sonarRange(SONAR_LEFTFRONT);
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0001 00E9 itoa(sonarGet(SONAR_LEFTFRONT),lcd);
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0001 00EA lcd_gotoxy(3,1);
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0001 00EB lcd_puts(lcd);
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0001 00EC 
; 0001 00ED sonarRange(SONAR_LEFTDIAG);
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0001 00EE itoa(sonarGet(SONAR_LEFTDIAG),lcd);
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0001 00EF lcd_gotoxy(6,1);
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0001 00F0 lcd_puts(lcd);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0001 00F1 
; 0001 00F2 delay_ms(200);
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0001 00F3 lcd_clear();
;PCODE: $000001CB VOL: 0
; 0001 00F4 }
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;
;void displayAllSonarLight()
; 0001 00F7 {
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0001 00F8 
; 0001 00F9         /*
; 0001 00FA         WindWire's Sonar Location
; 0001 00FB                      __
; 0001 00FC                    _|__|_____
; 0001 00FD                  //          \\SONAR RIGHTDIAG
; 0001 00FE                  /            \
; 0001 00FF                 |              |
; 0001 0100                ||              ||
; 0001 0101                 |              |
; 0001 0102                 |              |
; 0001 0103                ||______________||
; 0001 0104                       |__|
; 0001 0105 
; 0001 0106 
; 0001 0107         */
; 0001 0108 char lcd[16];
; 0001 0109 
; 0001 010A sonarRange(SONAR_FRONT);
;PCODE: $000001D1 VOL: 0
;	lcd -> Y+0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0001 010B itoa(sonarGetLight(SONAR_FRONT),lcd);
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0001 010C lcd_gotoxy(0,0);
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0001 010D lcd_puts(lcd);
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0001 010E 
; 0001 010F sonarRange(SONAR_RIGHTDIAG);
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0001 0110 itoa(sonarGetLight(SONAR_RIGHTDIAG),lcd);
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0001 0111 lcd_gotoxy(4,0);
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0001 0112 lcd_puts(lcd);
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0001 0113 
; 0001 0114 sonarRange(SONAR_RIGHTFRONT);
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0001 0115 itoa(sonarGetLight(SONAR_RIGHTFRONT),lcd);
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0001 0116 lcd_gotoxy(8,0);
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0001 0117 lcd_puts(lcd);
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0001 0118 
; 0001 0119 sonarRange(SONAR_RIGHTBACK);
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0001 011A itoa(sonarGetLight(SONAR_RIGHTBACK),lcd);
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0001 011B lcd_gotoxy(12,0);
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0001 011C lcd_puts(lcd);
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0001 011D 
; 0001 011E sonarRange(SONAR_BACK);
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0001 011F itoa(sonarGetLight(SONAR_BACK),lcd);
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0001 0120 lcd_gotoxy(0,1);
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0001 0121 lcd_puts(lcd);
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0001 0122 
; 0001 0123 sonarRange(SONAR_LEFTBACK);
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0001 0124 itoa(sonarGetLight(SONAR_LEFTBACK),lcd);
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0001 0125 lcd_gotoxy(4,1);
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0001 0126 lcd_puts(lcd);
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0001 0127 
; 0001 0128 sonarRange(SONAR_LEFTFRONT);
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0001 0129 itoa(sonarGetLight(SONAR_LEFTFRONT),lcd);
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0001 012A lcd_gotoxy(8,1);
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0001 012B lcd_puts(lcd);
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0001 012C 
; 0001 012D sonarRange(SONAR_LEFTDIAG);
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0001 012E itoa(sonarGetLight(SONAR_LEFTDIAG),lcd);
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0001 012F lcd_gotoxy(12,1);
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0001 0130 lcd_puts(lcd);
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0001 0131 
; 0001 0132 delay_ms(200);
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0001 0133 lcd_clear();
;PCODE: $0000026D VOL: 0
; 0001 0134 }
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;
